<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DESCRIPTION of this object &amp; variable creation

/** 
  * This shows a playerlist and shows it in the top left corner.
  * It uses some functions to get this information from the engine,
  * so use this as a guide on how to manage player information.
  *
  * It's local and doesn't get synced.
  * It is also persistent and will go into the next room.
  **/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW THE PLAYERLIST.

/** Get all currently logged-in players from the engine, loop through them,
  * get the obj_htme_player instance they control and get the color and the name
  * from it.
  * If no instance is found, it will display "(Other room)", because
  * if the player is in another room, his instance doesn't exist and we can't get
  * it. If you need the name of the player all the time, create a seperate object
  * for it and let it sync the names, then make it stayAlive and persistent (see
  * obj_htme_time).
  *
  * Please note that doing this EVERY draw event like we do it here is not
  * recommended at all. You should cache the instance and only reread it if it
  * got destroyed (which may happen).
  */
draw_set_color(c_white);
draw_text(40,35,"Players:");
var playerlist = htme_getPlayers();
for(var i = 0;i&lt;ds_list_size(playerlist);i++) {
    var player = ds_list_find_value(playerlist,i);
    /** We have the playerhash. Now get the instance of htme_obj_player
      * that this player controls 
      */
    var instance = htme_findPlayerInstance(htme_obj_player,player);
    if (instance != -1) {
        var name = (instance).name;
        var _image_blend = (instance).image_blend;
    } else {
        var name = "(Other room)";
        var _image_blend = c_gray;
    }
    //[extra] Additional debug information when debug overlay is enabled.
    if (htme_debugOverlayEnabled()) {
       //Add player hash to name
       name = name+" - "+player;
    }
    //[/extra]
    //Draw small player icon
    draw_sprite_ext(htme_spr_player,0,50,(i)*20+70,0.5,0.5,0,_image_blend,1);
    //Draw player name
    draw_set_colour(_image_blend);
    draw_text(70,(i)*20+62,name);
    
}
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
