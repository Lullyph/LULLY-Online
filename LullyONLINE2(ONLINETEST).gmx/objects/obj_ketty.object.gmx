<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ketty_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>obj_PLAYER</parentName>
  <maskName>spr_ketty_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
grav=.25;
max_grav=8;
stick_to_ground=true;

slide_factor=2;

walk_max=2;
walk_accel=.1;
run_max=3;
run_accel=.2;
//Air Control
air_control_enabled=true;
air_x_accel=walk_accel; //How easy is it to move in the air.
jump_strength=6.5;
jump_hold_limit=0;
//Changing Variables
x_speed=0;
y_speed=0;

//General Helpers
timer=0;

scale=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
//Directions
up_held=false;
down_held=false;
left_held=false;
right_held=false;

//Mobility
run_held=false;
jump_pressed=false;
jump_held=false;
jump_released=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup State Machine for Platform Boy
state_machine_init();

//Define States
state_create("Stand",pb_state_stand);
state_create("Walk",pb_state_walk);
state_create("Air",pb_state_air);
state_create("Ladder",pb_state_ladder);
state_create("PlatformFall",pb_state_platformfall);
//Set the default state
state_init("Stand");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update State
state_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read Controls
//Directions
up_held=keyboard_check(vk_up);
down_held=keyboard_check(vk_down);
left_held=keyboard_check(vk_left);
right_held=keyboard_check(vk_right);

//Mobility
run_held=keyboard_check(ord('Z'));
jump_pressed=keyboard_check_pressed(ord('X'));
jump_held=keyboard_check(ord('X'));
jump_released=keyboard_check_released(ord('X'));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Script code.
state_execute();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CHANGE ROOM
/*
// Place this in a script. Run the script from the transition object's Intersect Boundary event (eg. oPlayer)
// create temporary variables. store current room as string.
var curRoom = room_get_name(room);
var tempX = "";
var tempY = "";

// strip all non-numerical characters from room name
// eg. rm_5000_5000 will become 50005000
curRoom = string_digits(curRoom);

// spit the curRoom string in half and store each half in a variable
for ( i = 1; i &lt; (string_length(curRoom) / 2) + 1; i++ ) {
    tempX += string_char_at(curRoom, i);
}

for ( i = (string_length(curRoom)/2) + 1; i &lt; string_length(curRoom) + 1; i++ ) {
    tempY += string_char_at(curRoom, i);
}

// convert coords to numbers
tempX = real(tempX);
tempY = real(tempY);

// alter coordinates based on which direction the player left the room
// also move the transitioning object to the correct position in the new room
if ( x &lt; 64 ) {
    tempX -= 1;
    x += room_width;
} else if ( x &gt; 545 ) {
    tempX += 1;
    x -= room_width;
}

if ( y &lt; 0 ) {
    tempY -= 1;
    y += room_height;
} else if ( y &gt; room_height - 64 ) {
    tempY += 1;
    y -= room_height;
}

// construct the new string based on the naming convention
var nextRoom = "rm_" + string(tempX) + "_" + string(tempY);

// convert nextRoom from string to index, make sure room exists, and transition
// will wrap the current room if it doesn't exist
if ( room != asset_get_index(nextRoom)
&amp;&amp; room_exists(asset_get_index(nextRoom)) ) {
    room_goto(asset_get_index(nextRoom));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_set_font(fnt);

draw_text(20,20,"State: "+string(state_name)
              +"#x_speed: "+string(x_speed)
              +"#y_speed: "+string(y_speed)
         );

var roomname = room_get_name(room);
draw_text(800,20,"Room: "+string(roomname)
         );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(spr_ladder,0,x,y,1+abs(sin(scale)),1+abs(sin(scale)),0,c_white,1);
//scale+=.1;
draw_self();
//draw_sprite_ext(spr_player_mask,0,x,y,image_xscale,image_yscale,image_angle,c_white,.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME RESTART

game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
