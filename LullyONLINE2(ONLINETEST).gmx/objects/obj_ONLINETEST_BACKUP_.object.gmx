<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ketty_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>obj_PLAYER</parentName>
  <maskName>spr_ketty_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ADD TO GMnet ENGINE
/**
  * Starts syncing.
  * Everything in this script MUST only be run in the create event and at the very beginning.
  */
mp_sync();
/**
 * Tell the engine to add the position:
 * x,y
 * These variables will be synced as part of a so called "variable group".
 * It will be called "Pos" and syncs it every 5 seconds.
 * We sync the position every 5 seconds to prevent the players from desyncing.
 */
mp_addPosition("Pos",5*room_speed);
/**
  * Change the sync mode to be SMART.
  * This means that the packets get definitely delivered, this "emulates" the 
  * reliability of TCP.
  * And it also only syncs if the variable has changed since the last sync.
  * Please note that this is not that fast and should not be executed for the same group
  * in a short time, so set a big delay!
  */
mp_setType("Pos",mp_type.SMART);
/**
  * Adds a tolerance of 20 to the Pos group (x and y position).
  * This meand when a client recieves the position update, it will only sync it, if the
  * local x and y position are 20 pixels more/less than the actual position.
  * Since we sync the position to avoid desync, a low number means the player might "flicker" every
  * time the position is recieved, because it slightly changes it.
  * We only want to change it if the client is significantly away from the player, so it get's 
  * corrected.
  */
mp_tolerance("Pos",20);


/**
 * Tell the engine to add the basic drawing variables:
 * image_alpha,image_angle,image_blend,image_index,image_speed,image_xscale
 * image_yscale,visible
 * This is mostly to sync the xscale (the direction the player faces in) and the color in this demo.
 * Also synced for the same reason as the position: To avoid desync.
 */
mp_addBuiltinBasic("basicDrawing",15*room_speed);
mp_setType("basicDrawing",mp_type.SMART);

/**
 * Tell the engine to add the builtin GameMaker variables:
 * direction,gravity,gravity_direction,friction,hspeed,vspeed
 * Sync the entire physics. Also to avoid desync.
 */
mp_addBuiltinPhysics("basicPhysics",15*room_speed);
mp_setType("basicPhysics",mp_type.SMART);

/**
 * This adds two custom groups that sync the variables 
 * name,pressed_jump,pressed_left,pressed_right
 *
 * SADLY, due to current limitations in GML, we can't access any of this variables by their
 * name in the engine. You need to add their values to a special list in begin step and
 * retrieve them in end step. Go to these events in this demo object and you'll see.
 *
 * Name is synced to update the name (obviously) and is sent SMART and with great delay between the
 * syncs, since it shouldn't actually sync at all. At this point we should note, that all variable
 * groups also get synced automatically when needed, for example if someone connects or changes room.
 *
 * The second group syncs the controls every step, this is the important part, this is what actually
 * moves the player.
 *
 * Since no type was changed, the default type FAST is chosen, this means packets get sent
 * only once, but very fast.
 * This however means, that the other clients could desync, that's why we sync position and physics.
 *
 * The third argument specifys the type of the variables. See
 * http://docs.yoyogames.com/source/dadiospice/002_reference/buffers/buffer_read.html
 * for all options
 */
mp_add("playerName","name",buffer_string,60*room_speed);
mp_setType("playerName",mp_type.SMART);
mp_add("controls","pressed_jump,pressed_left,pressed_right",buffer_bool,1);


/** 
 * By the way:
 * Our object player is persistent. That means it will travel through rooms without getting destroyed.
 * Non local players however WILL get destroyed on changing the room.
 * This way, when entering a room, only our player will actually travel.
 * If you also want to sync non local players between rooms, see object obj_htme_time
 */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
grav=.25;
max_grav=8;
stick_to_ground=true;

slide_factor=2;

walk_max=2;
walk_accel=.1;
run_max=3;
run_accel=.2;
//Air Control
air_control_enabled=true;
air_x_accel=walk_accel; //How easy is it to move in the air.
jump_strength=6.5;
jump_hold_limit=0;
//Changing Variables
x_speed=0;
y_speed=0;

//General Helpers
timer=0;

scale=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
//Directions
self.up_held=false;
self.down_held=false;
self.left_held=false;
self.right_held=false;

//Mobility
self.run_held=false;
self.jump_pressed=false;
self.jump_held=false;
self.jump_released=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup State Machine for Platform Boy
state_machine_init();

//Define States
state_create("Stand",pb_state_stand);
state_create("Walk",pb_state_walk);
state_create("Air",pb_state_air);
state_create("Ladder",pb_state_ladder);
state_create("PlatformFall",pb_state_platformfall);
//Set the default state
state_init("Stand");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup basic stuff for the demo platformer.

/** These variables are used to indicate if the player hat controls this
  * player instance, has pressed one of the three buttons.
  */
self.pressed_jump = false;
self.pressed_left = false;
self.pressed_right = false;
self.name = "";

/** 
  * Check if this instance is created by the local player.
  * If yes, set up color and name.
  * You should always check if you are changing the local player, because
  * in this case we want color and name to come from the other players.
  *
  * All these helpful tool scripts can be found in scripts-&gt;htme-&gt;tools
  * See the chat or playerlist objects for more examples.
  */
if (htme_isLocal()) {
    /** Totro generates random names and is not part of the main engine, it's
      * another marketplace asset by me :)
      */
    var ttr = totro(5,7,1);
    self.name = ttr[0];
    /** Gives this player a random color. */
    self.image_blend = irandom(16777215);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update State
state_update();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RETRIEVE VARIABLES FROM THE ENGINE
/** SADLY, due to current limitations in GML, we need to add all variables added to the
  * engine by using mp_add (mp_addBuiltin* are not needed to be added here!!).
  * Just use this as a template and copy it.
  *
  * More information in Begin Step. This here does the oposite, it sets the instance variables
  * to the variables stored in the engine.
  **/

self.name = mp_map_syncOut("name", self.name);
self.pressed_jump = mp_map_syncOut("pressed_jump", self.pressed_jump);
self.pressed_left = mp_map_syncOut("pressed_left", self.pressed_left);
self.pressed_right = mp_map_syncOut("pressed_right", self.pressed_right);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ADD VARIABLES TO THE ENGINE
/** SADLY, due to current limitations in GML, we need to add all variables added to the
  * engine by using mp_add. (and ONLY mp_add, mp_addPosition and similiar are 
  * resolved automatically!)
  * Just use this as a template and copy it.
  **/
  
/* You need to apply changes to your variables here aswell, before you sync them. 
 * If you need to change them during the step, cache them for the local player
 * and then sync them here. The multiplayer engine will not change the variables
 * for the local player, only retrieve them to send them to other players
 */
if (htme_isLocal()) {
    /** WRITES THE INPUTS FOR THE LOCAL PLAYER! These will be sent to all
      * other players as configured in the create event.
      *
      * Instead of check_pressed we use check for the jump, 
      * because the pressed frames could get lost due to network lagg 
      * which can cause desync and we don't want to use SMART or IMPORTANT
      * (see manual) packets here, because this needs to be fast!
      * This also means, our players can fly.
      * If you need keyboard_check_pressed sync keyboard_check instead and 
      * built your own function that simulates the pressed functions. 
      */
    self.pressed_jump = keyboard_check(vk_space);
    self.pressed_left = keyboard_check(vk_left);
    self.pressed_right = keyboard_check(vk_right);
}

/** THIS SYNCS THE VARIABLES WITH THE ENGINE
  * Add every variable synced via mp_add here!
  * DO NOT JUST DO THIS FOR THE LOCAL PLAYER! Do it for all!
  */
mp_map_syncIn("name",self.name);
mp_map_syncIn("pressed_jump",self.pressed_jump);
mp_map_syncIn("pressed_left",self.pressed_left);
mp_map_syncIn("pressed_right",self.pressed_right);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read Controls
//Directions
self.up_held=keyboard_check(vk_up);
self.down_held=keyboard_check(vk_down);
self.left_held=keyboard_check(vk_left);
self.right_held=keyboard_check(vk_right);

//Mobility
self.run_held=keyboard_check(ord('Z'));
self.jump_pressed=keyboard_check_pressed(ord('X'));
self.jump_held=keyboard_check(ord('X'));
self.jump_released=keyboard_check_released(ord('X'));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Script code.
state_execute();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CHANGE ROOM
/*
// Place this in a script. Run the script from the transition object's Intersect Boundary event (eg. oPlayer)
// create temporary variables. store current room as string.
var curRoom = room_get_name(room);
var tempX = "";
var tempY = "";

// strip all non-numerical characters from room name
// eg. rm_5000_5000 will become 50005000
curRoom = string_digits(curRoom);

// spit the curRoom string in half and store each half in a variable
for ( i = 1; i &lt; (string_length(curRoom) / 2) + 1; i++ ) {
    tempX += string_char_at(curRoom, i);
}

for ( i = (string_length(curRoom)/2) + 1; i &lt; string_length(curRoom) + 1; i++ ) {
    tempY += string_char_at(curRoom, i);
}

// convert coords to numbers
tempX = real(tempX);
tempY = real(tempY);

// alter coordinates based on which direction the player left the room
// also move the transitioning object to the correct position in the new room
if ( x &lt; 64 ) {
    tempX -= 1;
    x += room_width;
} else if ( x &gt; 545 ) {
    tempX += 1;
    x -= room_width;
}

if ( y &lt; 0 ) {
    tempY -= 1;
    y += room_height;
} else if ( y &gt; room_height - 64 ) {
    tempY += 1;
    y -= room_height;
}

// construct the new string based on the naming convention
var nextRoom = "rm_" + string(tempX) + "_" + string(tempY);

// convert nextRoom from string to index, make sure room exists, and transition
// will wrap the current room if it doesn't exist
if ( room != asset_get_index(nextRoom)
&amp;&amp; room_exists(asset_get_index(nextRoom)) ) {
    room_goto(asset_get_index(nextRoom));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_set_font(fnt);

draw_text(20,20,"State: "+string(state_name)
              +"#x_speed: "+string(x_speed)
              +"#y_speed: "+string(y_speed)
         );

var roomname = room_get_name(room);
draw_text(800,20,"Room: "+string(roomname)
         );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(spr_ladder,0,x,y,1+abs(sin(scale)),1+abs(sin(scale)),0,c_white,1);
//scale+=.1;
draw_self();
//draw_sprite_ext(spr_player_mask,0,x,y,image_xscale,image_yscale,image_angle,c_white,.5);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw nameplate
draw_set_color(image_blend);
draw_set_halign(fa_center);
draw_text(x,y-sprite_yoffset-5-string_height(self.name),self.name);
draw_set_halign(fa_left);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME RESTART

game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
