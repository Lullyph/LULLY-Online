<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ketty_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>obj_PLAYER</parentName>
  <maskName>spr_ketty_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ADD TO GMnet ENGINE
/**
  * Starts syncing.
  * Everything in this script MUST only be run in the create event and at the very beginning.
  */
mp_sync();

self.xpos=x;
self.ypos=y;
stepsToWaitUntilSendNextPos=1;  //6
mp_add("interpolation","xpos,ypos",buffer_s16,stepsToWaitUntilSendNextPos);

/// Interpolation setup
// use when check if new pos received
last_received_xpos=-1;
last_received_ypos=-1;
// interpolate values each step
travel_every_step_x=-1;
travel_every_step_y=-1;
// steps we interpolate
travel_every_step_counter=-1;
// save new pos if the other interpolation is not done yet
new_queue=ds_queue_create();
/**
 * Tell the engine to add the position:
 * x,y
 * These variables will be synced as part of a so called "variable group".
 * It will be called "Pos" and syncs it every 5 seconds.
 * We sync the position every 5 seconds to prevent the players from desyncing.
 */
mp_addPosition("Pos",5*room_speed);
/**
  * Change the sync mode to be SMART.
  * This means that the packets get definitely delivered, this "emulates" the 
  * reliability of TCP.
  * And it also only syncs if the variable has changed since the last sync.
  * Please note that this is not that fast and should not be executed for the same group
  * in a short time, so set a big delay!
  */
mp_setType("Pos",mp_type.SMART);
/**
  * Adds a tolerance of 20 to the Pos group (x and y position).
  * This meand when a client recieves the position update, it will only sync it, if the
  * local x and y position are 20 pixels more/less than the actual position.
  * Since we sync the position to avoid desync, a low number means the player might "flicker" every
  * time the position is recieved, because it slightly changes it.
  * We only want to change it if the client is significantly away from the player, so it get's 
  * corrected.
  */
mp_tolerance("Pos",20);


/**
 * Tell the engine to add the basic drawing variables:
 * image_alpha,image_angle,image_blend,image_index,image_speed,image_xscale
 * image_yscale,visible
 * This is mostly to sync the xscale (the direction the player faces in) and the color in this demo.
 * Also synced for the same reason as the position: To avoid desync.
 */
mp_addBuiltinBasic("basicDrawing",15*room_speed);
mp_setType("basicDrawing",mp_type.SMART);

/**
 * Tell the engine to add the builtin GameMaker variables:
 * direction,gravity,gravity_direction,friction,hspeed,vspeed
 * Sync the entire physics. Also to avoid desync.
 */
mp_addBuiltinPhysics("basicPhysics",15*room_speed);
mp_setType("basicPhysics",mp_type.SMART);

/**
 * This adds two custom groups that sync the variables 
 * name,pressed_jump,pressed_left,pressed_right
 *
 * SADLY, due to current limitations in GML, we can't access any of this variables by their
 * name in the engine. You need to add their values to a special list in begin step and
 * retrieve them in end step. Go to these events in this demo object and you'll see.
 *
 * Name is synced to update the name (obviously) and is sent SMART and with great delay between the
 * syncs, since it shouldn't actually sync at all. At this point we should note, that all variable
 * groups also get synced automatically when needed, for example if someone connects or changes room.
 *
 * The second group syncs the controls every step, this is the important part, this is what actually
 * moves the player.
 *
 * Since no type was changed, the default type FAST is chosen, this means packets get sent
 * only once, but very fast.
 * This however means, that the other clients could desync, that's why we sync position and physics.
 *
 * The third argument specifys the type of the variables. See
 * http://docs.yoyogames.com/source/dadiospice/002_reference/buffers/buffer_read.html
 * for all options
 */
mp_add("playerName","name",buffer_string,60*room_speed);
mp_setType("playerName",mp_type.SMART);
mp_add("controls","up_held,down_held,left_held,right_held,run_held,jump_pressed,jump_held,jump_released",buffer_bool,1);

mp_add("properties","grav,max_grav,stick_to_ground,slide_factor,walk_max,walk_accel,run_max,run_accel",buffer_bool,1);
mp_add("AirControl","air_control_enabled,air_x_accel,jump_strength,jump_hold_limit",buffer_bool,1);
mp_add("GeneralHelpers","timer,scale",buffer_bool,1);

/** 
 * By the way:
 * Our object player is persistent. That means it will travel through rooms without getting destroyed.
 * Non local players however WILL get destroyed on changing the room.
 * This way, when entering a room, only our player will actually travel.
 * If you also want to sync non local players between rooms, see object obj_htme_time
 */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup State Machine for Platform Boy

state_machine_init();

//Define States
state_create("Stand",pb_state_stand);
state_create("Walk",pb_state_walk);
state_create("Air",pb_state_air);
state_create("Ladder",pb_state_ladder);
state_create("PlatformFall",pb_state_platformfall);
state_create("StairL",pb_state_stairL);
state_create("StairR",pb_state_stairR);
state_create("RopeSwing",pb_state_ropeswing);

//Set the default state
state_init("Stand");

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup basic stuff for the demo platformer.

/** These variables are used to indicate if the player hat controls this
  * player instance, has pressed one of the three buttons.
  */

///Controls
//Directions
self.up_held=false;
self.down_held=false;
self.left_held=false;
self.right_held=false;

//Mobility
self.run_held=false;
self.jump_pressed=false;
self.jump_held=false;
self.jump_released=false;

self.name = "";


/** 
  * Check if this instance is created by the local player.
  * If yes, set up color and name.
  * You should always check if you are changing the local player, because
  * in this case we want color and name to come from the other players.
  *
  * All these helpful tool scripts can be found in scripts-&gt;htme-&gt;tools
  * See the chat or playerlist objects for more examples.
  */
if (htme_isLocal()) {
    /** Totro generates random names and is not part of the main engine, it's
      * another marketplace asset by me :)
      */
    var ttr = totro(5,7,1);
    self.name = ttr[0];
    /** Gives this player a random color. */
    self.image_blend = irandom(16777215);
    //self.image_xscale = .5;
    //self.image_yscale = .5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
self.grav=.25;
self.max_grav=8;
self.stick_to_ground=true;

self.slide_factor=2;

self.walk_max=2;
self.walk_accel=.1;
self.run_max=3;
self.run_accel=.2;
//Air Control
self.air_control_enabled=true;
self.air_x_accel=self.walk_accel; //How easy is it to move in the air.
self.jump_strength=6.5;
self.jump_hold_limit=0;
//Changing Variables
self.x_speed=0;
self.y_speed=0;

//General Helpers
self.timer=0;

self.scale=1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [***SIGNPOST***]
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FONT ADD

//font
signfont = font_add("m5x7.ttf", 72, false, false, 32, 128);


//showtext
showtext = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RETRIEVE VARIABLES FROM THE ENGINE
/** SADLY, due to current limitations in GML, we need to add all variables added to the
  * engine by using mp_add (mp_addBuiltin* are not needed to be added here!!).
  * Just use this as a template and copy it.
  *
  * More information in Begin Step. This here does the oposite, it sets the instance variables
  * to the variables stored in the engine.
  **/
  
self.name = mp_map_syncOut("name", self.name);

//controls
self.up_held = mp_map_syncOut("up_held", self.up_held);
self.down_held = mp_map_syncOut("down_held", self.down_held);
self.left_held = mp_map_syncOut("left_held", self.left_held);
self.right_held = mp_map_syncOut("right_held", self.right_held);
self.run_held = mp_map_syncOut("run_held", self.run_held);
self.jump_pressed = mp_map_syncOut("jump_pressed", self.jump_pressed);
self.jump_held = mp_map_syncOut("jump_held", self.jump_held);
self.jump_released = mp_map_syncOut("up_held", self.jump_released);

self.xpos = mp_map_syncOut("xpos", self.xpos);
self.ypos = mp_map_syncOut("ypos", self.ypos);

//properties
self.grav = mp_map_syncOut("grav",self.grav);
self.max_grav = mp_map_syncOut("max_grav",self.max_grav);
self.stick_to_ground = mp_map_syncOut("stick_to_ground",self.stick_to_ground);
self.slide_factor = mp_map_syncOut("slide_factor",self.slide_factor);
self.walk_max = mp_map_syncOut("walk_max",self.walk_max);
self.walk_accel = mp_map_syncOut("walk_accel",self.walk_accel);
self.run_max = mp_map_syncOut("run_max",self.run_max);
self.run_accel = mp_map_syncOut("run_accel",self.run_accel);

//air control
self.air_control_enabled = mp_map_syncOut("air_control_enabled", self.air_control_enabled);
self.air_x_accel = mp_map_syncOut("air_x_accel", self.air_x_accel);
self.jump_strength = mp_map_syncOut("jump_strength", self.jump_strength);
self.jump_hold_limit = mp_map_syncOut("jump_hold_limit", self.jump_hold_limit);

//general helpers
//self.timer = mp_map_syncOut("timer", self.timer);
self.scale = mp_map_syncOut("scale", self.scale);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update State
state_update();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ADD VARIABLES TO THE ENGINE
/** SADLY, due to current limitations in GML, we need to add all variables added to the
  * engine by using mp_add. (and ONLY mp_add, mp_addPosition and similiar are 
  * resolved automatically!)
  * Just use this as a template and copy it.
  **/
  
/* You need to apply changes to your variables here aswell, before you sync them. 
 * If you need to change them during the step, cache them for the local player
 * and then sync them here. The multiplayer engine will not change the variables
 * for the local player, only retrieve them to send them to other players
 */
if (htme_isLocal()) {
    /** WRITES THE INPUTS FOR THE LOCAL PLAYER! These will be sent to all
      * other players as configured in the create event.
      *
      * Instead of check_pressed we use check for the jump, 
      * because the pressed frames could get lost due to network lagg 
      * which can cause desync and we don't want to use SMART or IMPORTANT
      * (see manual) packets here, because this needs to be fast!
      * This also means, our players can fly.
      * If you need keyboard_check_pressed sync keyboard_check instead and 
      * built your own function that simulates the pressed functions. 
      */
//Directions
self.up_held=keyboard_check(vk_up);
self.down_held=keyboard_check(vk_down);
self.left_held=keyboard_check(vk_left);
self.right_held=keyboard_check(vk_right);

//Mobility
self.run_held=keyboard_check(ord('Z'));
self.jump_pressed=keyboard_check_pressed(ord('X'));
self.jump_held=keyboard_check(ord('X'));
self.jump_released=keyboard_check_released(ord('X'));
}


/** THIS SYNCS THE VARIABLES WITH THE ENGINE
  * Add every variable synced via mp_add here!
  * DO NOT JUST DO THIS FOR THE LOCAL PLAYER! Do it for all!
  */
mp_map_syncIn("name",self.name);

//controls
mp_map_syncIn("up_held",self.up_held);
mp_map_syncIn("down_held",self.down_held);
mp_map_syncIn("left_held",self.left_held);
mp_map_syncIn("right_held",self.right_held);
mp_map_syncIn("run_held",self.run_held);
mp_map_syncIn("jump_pressed",self.jump_pressed);
mp_map_syncIn("jump_held",self.jump_held);
mp_map_syncIn("jump_released",self.jump_released);

//properties
mp_map_syncIn("grav",self.grav);
mp_map_syncIn("max_grav",self.max_grav);
mp_map_syncIn("stick_to_ground",self.stick_to_ground);
mp_map_syncIn("slide_factor",self.slide_factor);
mp_map_syncIn("walk_max",self.walk_max);
mp_map_syncIn("walk_accel",self.walk_accel);
mp_map_syncIn("run_max",self.run_max);
mp_map_syncIn("run_accel",self.run_accel);

//air control
mp_map_syncIn("air_control_enabled",self.air_control_enabled);
mp_map_syncIn("air_x_accel",self.air_x_accel);
mp_map_syncIn("jump_strength",self.jump_strength);
mp_map_syncIn("jump_hold_limit",self.jump_hold_limit);

//general helpers
//mp_map_syncIn("timer",self.timer);
mp_map_syncIn("scale",self.scale);


if (htme_isLocal()) {
    // ====================
    // Run on THIS computer (LOCAL)
    // ====================
    // This script here only run if the instance is local (our player on this computer)
    // The engine will create our player on the other players screens
    // So we now got our own player on this computer and the other players computers
    // We must control what we want to send to our player on the other players computer
    // Here you should add controls over your player
    // if we got this inside if (htme_isLocal()) {
    // This will only run on your computer and not on the other players computers
    // We add some info to send to our player on the other computers
    self.xpos=x;
    self.ypos=y;
    // We will set this on every step but the engine will only send it every
    // mp_add("interpolation","xpos,ypos",buffer_s16,stepsToWaitUntilSendNextPos);
    //                                                 ^
    //                                                 6
    // Every 6 steps we send this info to our player on the other computers
} else {
    // ==============================
    // Run on OTHER players computers (NON LOCAL)
    // ==============================
    // This script here only run on the other players screens
    // Here you should add what will happen on other players screens
    // in the end step we use mp_map_syncOut() this is used to receive
    // information from mp_map_syncIn()
    // We now want to use the information we got from our player on our computer
    // on this player computer
    // So in the above we set
    // self.xpos=x;
    // self.ypos=y;
    // The multiplayer engine sent it to this object on the other computer
    // The engine also create a new instance of this object. And now the engine
    // wait until you send information to it from your computer. Like you xpos and ypos
    // So what should happen on the other players screen with our xpos and ypos
    // we got from your computer?
    // We want to interpolate.
    // This will run every step but we dont get new positions every step do we
    // So we must check when new information is received.
    if self.xpos!=last_received_xpos or self.ypos!=last_received_ypos {
        // We got a different xpos or ypos value from our computer
        // Let us save this new pos in a queue
        // We always save the new pos in a queue
        // Because we might get a new pos before we are done with the first one
        ds_queue_enqueue(new_queue,self.xpos,self.ypos);
        // In a queue the values get out as they came in so if we add
        // Its like puting cards one each other and draw them from below
        // What comes in first draw first
        // Ex you enqueue number 3,8,5,2,7,4 and then dequeue 4 of them
        // you get 3 first then 8,5 and 2
        // next time you dequeue you get 7 and 4
        // Now lets save this pos as the last
        last_received_xpos=self.xpos;
        last_received_ypos=self.ypos;
    }

    // Now we check the queue if we got a new pos in it
    if ds_queue_size(new_queue)&gt;0 {
        // First we check if we allready interpolating
        // If we do then we must wait until it's done and then we can do the new pos
        if travel_every_step_counter&lt;1 {
            show_debug_message("x:" + string(x) + " y:" + string(y))
            // We now want to smootly move our player object on this player computer
            // to that new x pos or y pos
            // get the new x and y pos from the queue
            // we saved x first and the y so
            var newx=ds_queue_dequeue(new_queue);
            // and then get y
            var newy=ds_queue_dequeue(new_queue);
            show_debug_message("new x:" + string(newx) + " new y:" + string(newy))
            // Ok now we must move it some pixels at a time every step
            // And we know how long it took to travel this new pos
            // We sent this new info every 6 step so from x to new x it took 3 steps

            // Now we check if we got many new pos saved
            // If we got to many our player on the other computer will
            // fall back some and desync
            // So we check if we got 3 new pos then we can just skip one and travel
            // to the next
            if ds_queue_size(new_queue)&gt;2 {
                // We got to many new pos lets take one more out
                var newx=ds_queue_dequeue(new_queue);
                var newy=ds_queue_dequeue(new_queue);
                // But now we took 2 new values
                // And we know it took 6 steps to travel to one new pos
                // so if we take out 2 new pos it must have taken 12 steps
                // to travel there. But to avoid that we fall back again
                // lets only do it in 11 steps
                // We set the stepsToWaitUntilSendNextPos in the create event
                var StepsWeTravel=(stepsToWaitUntilSendNextPos*2)-1;
            } else {
                // Set time it took to travel to this new pos
                // We only took one new pos so it took 6 steps to travel there
                var StepsWeTravel=stepsToWaitUntilSendNextPos;
            }
            // First we check the distance from current pos on this computer (x,y)
            // To your new position we sent to this copmputer (xpos, ypos)
            var distance_to_move_x=newx-x;
            var distance_to_move_y=newy-y;
            // Then we calc how much we must move to reach the new pos in the steps we want
            travel_every_step_x=distance_to_move_x/StepsWeTravel;
            travel_every_step_y=distance_to_move_y/StepsWeTravel;
            // We want to only move our player on other computer in 6 steps (or more if we took 2 new pos) so lets count it
            travel_every_step_counter=StepsWeTravel;
        }
    }
    // We now must handle the movement
    // First we check if we got any counts left
    if travel_every_step_counter&gt;0 {
        // Ok we must travel some
        // Let add it to x and y on this computer
        // Remember this script will never run on your computer where you control the player
        // Only on the other players computers
        show_debug_message("travel x:" + string(travel_every_step_x) + " travel y:" + string(travel_every_step_y));
        x+=travel_every_step_x;
        y+=travel_every_step_y;
        show_debug_message("new x:" + string(x) + " new y:" + string(y));
        // Now we remove one count
        travel_every_step_counter-=1; // same as travel_every_step_counter=travel_every_step_counter-1;
        show_debug_message("steps left:" + string(travel_every_step_counter))
        // When it reach 0 we will check if we got a new pos we can interpolate to
    }
}

// COMMON
// This will run on this computer and the other computers
// The mp_map_syncIn only run on the local. If we are on the remote it will just ignore this
mp_map_syncIn("xpos",self.xpos);
mp_map_syncIn("ypos",self.ypos);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Script code.
state_execute();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CHANGE ROOM

if (htme_isLocal()) {

// Place this in a script. Run the script from the transition object's Intersect Boundary event (eg. oPlayer)
// create temporary variables. store current room as string.
var curRoom = room_get_name(room);
var tempX = "";
var tempY = "";

// strip all non-numerical characters from room name
// eg. rm_5000_5000 will become 50005000
curRoom = string_digits(curRoom);

// spit the curRoom string in half and store each half in a variable
for ( i = 1; i &lt; (string_length(curRoom) / 2) + 1; i++ ) {
    tempX += string_char_at(curRoom, i);
}

for ( i = (string_length(curRoom)/2) + 1; i &lt; string_length(curRoom) + 1; i++ ) {
    tempY += string_char_at(curRoom, i);
}

// convert coords to numbers
tempX = real(tempX);
tempY = real(tempY);

// alter coordinates based on which direction the player left the room
// also move the transitioning object to the correct position in the new room
if (x &lt;= 64 ) {
    tempX -= 1;
    x += room_width;
    x = 576;
} else if (x &gt;= room_width - 64 ) {
    tempX += 1;
    x -= room_width;
    x = 64;
}

if (y &lt;= 32 ) {
    tempY -= 1;
    y += room_height;
    y = 416; //448
} else if (y &gt;= room_height - 64 ) {
    tempY += 1;
    y -= room_height;
    y = 32;
}

// construct the new string based on the naming convention
var nextRoom = "rm_" + string(tempX) + "_" + string(tempY);

// convert nextRoom from string to index, make sure room exists, and transition
// will wrap the current room if it doesn't exist
if ( room != asset_get_index(nextRoom)
&amp;&amp; room_exists(asset_get_index(nextRoom)) ) {
    room_goto(asset_get_index(nextRoom));
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CHANGE ROOM BACKUP

/*if (htme_isLocal()) {

// Place this in a script. Run the script from the transition object's Intersect Boundary event (eg. oPlayer)
// create temporary variables. store current room as string.
var curRoom = room_get_name(room);
var tempX = "";
var tempY = "";

// strip all non-numerical characters from room name
// eg. rm_5000_5000 will become 50005000
curRoom = string_digits(curRoom);

// spit the curRoom string in half and store each half in a variable
for ( i = 1; i &lt; (string_length(curRoom) / 2) + 1; i++ ) {
    tempX += string_char_at(curRoom, i);
}

for ( i = (string_length(curRoom)/2) + 1; i &lt; string_length(curRoom) + 1; i++ ) {
    tempY += string_char_at(curRoom, i);
}

// convert coords to numbers
tempX = real(tempX);
tempY = real(tempY);

// alter coordinates based on which direction the player left the room
// also move the transitioning object to the correct position in the new room
if ( obj_PLAYER.x &lt;= 64 ) {
    tempX -= 1;
    obj_PLAYER.x += room_width;
    obj_PLAYER.x = 576;
} else if ( obj_PLAYER.x &gt;= room_width - 64 ) {
    tempX += 1;
    obj_PLAYER.x -= room_width;
    obj_PLAYER.x = 64;
}

if ( obj_PLAYER.y &lt;= 32 ) {
    tempY -= 1;
    obj_PLAYER.y += room_height;
    obj_PLAYER.y = 416; //448
} else if ( obj_PLAYER.y &gt;= room_height - 64 ) {
    tempY += 1;
    obj_PLAYER.y -= room_height;
    obj_PLAYER.y = 32;
}

// construct the new string based on the naming convention
var nextRoom = "rm_" + string(tempX) + "_" + string(tempY);

// convert nextRoom from string to index, make sure room exists, and transition
// will wrap the current room if it doesn't exist
if ( room != asset_get_index(nextRoom)
&amp;&amp; room_exists(asset_get_index(nextRoom)) ) {
    room_goto(asset_get_index(nextRoom));
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ENTER DOOR BACKUP

/// obj_door's collision event with obj_player
/*var isLocal;
with (other) {isLocal = htme_isLocal();}

if (isLocal &amp;&amp; keyboard_check_pressed(vk_up))
{
    with(obj_Door)
    {
        {
        if room == rm_5000_5000{
        
            room_goto(rm_4999_4999);
            obj_ONLINETEST.x = 176;
            obj_ONLINETEST.y = 159; //One Pixel Above
            }
        }
    }
}


if (isLocal &amp;&amp; keyboard_check_pressed(vk_up))
{
    with(obj_Door)
    {
        {
        if room == rm_4999_4999{
        
            room_goto(rm_5000_5000);
            obj_ONLINETEST.x = 496;
            obj_ONLINETEST.y = 127; //One Pixel Above
            }
        }
    }
}



///CHECK IF DOOR ENTERED

/** This is the script to change room. It's not that important.
  * However, it checks if there's a player collision and if that player is local,
  * that might be useful for you
  */
/*
var isLocal;
with (other) {isLocal = htme_isLocal();}

if (room == rm_5000_5000){
if(place_meeting_rounded(x,y,obj_Door)) {   
    if (isLocal &amp;&amp; self.up_held) {
       
                room_goto(rm_4999_4999);
                x = 416;
                y = 160;
            }
    }
}

if (room == rm_4999_4999){
if(place_meeting_rounded(x,y,obj_Door)) {   
    if (isLocal &amp;&amp; self.up_held) {
       
                room_goto(rm_5000_5000);
                x = 480;
                y = 128;
            }
    }
}



/*var isLocal;
with (other) {isLocal = htme_isLocal();}


if (isLocal &amp;&amp; keyboard_check_pressed(vk_up)) {
    var dest = rm_4999_4999;
    if (room == rm_4999_4999) dest = rm_5000_5000;
    room_goto(dest);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [***SIGNPOST***]
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///signpost touch

if (htme_isLocal()) {

    if (place_meeting(x,y,obj_signpost))
        {
            showtext = 1;
    } else {
            showtext = 0;
        }
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VIEW ROOMNAME/STATES/SPEED

if (htme_isLocal()) {

display_set_gui_size(800, 600); //WOW!

//draw_set_colour(c_white);
//draw_set_font(fnt);
//draw_text_transformed(room_width / 2, room_height / 2, "GAME OVER!", 2, 2, image_angle);
//draw_text_transformed(x, y, string, xscale, yscale, angle);


if window_get_fullscreen(){

draw_set_colour(c_white);
draw_set_font(fnt);

draw_text_transformed(20,20,"State: "+string(state_name)
              +"#x_speed: "+string(x_speed)
              +"#y_speed: "+string(y_speed),.3,.3,image_angle
         );

var roomname = room_get_name(room);
draw_text_transformed(580,20,"Room: "+string(roomname),.3,.3,image_angle
         );
         
    } else {
    
draw_set_colour(c_white);
draw_set_font(fnt);

draw_text_transformed(20,20,"State: "+string(state_name)
              +"#x_speed: "+string(x_speed)
              +"#y_speed: "+string(y_speed),.3,.3,image_angle
         );

var roomname = room_get_name(room);
draw_text_transformed(580,20,"Room: "+string(roomname),.3,.3,image_angle
         );
    }
}

/*draw_text(20,20,"State: "+string(state_name)
              +"#x_speed: "+string(x_speed)
              +"#y_speed: "+string(y_speed)
         );

var roomname = room_get_name(room);
draw_text(600,20,"Room: "+string(roomname)
         );

}


/*if window_get_fullscreen(){
            //draw_set_halign(fa_right);
            draw_text(obj_signpost.x+35, obj_signpost.y-8, "Hello!#Welcome to LULLY Online!");
    } else {
            draw_text(obj_signpost.x+35, obj_signpost.y-8, "Hello!#Welcome to LULLY Online!");
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [***SIGNPOST***]
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DISPLAY MESSAGE

/*if (showtext == 1)
    {
        //draw_set_halign(fa_right);
        draw_text(x+135, y-1, "Hello!#Welcome to LULLY Online!");
    }
*/


//draw_text_transformed(x, y, string, xscale, yscale, angle);


if (showtext == 1)
    {
        if window_get_fullscreen(){
            //draw_set_halign(fa_right);
            draw_set_font(signfont);
            draw_text_transformed(obj_signpost.x+35, obj_signpost.y-16, "Hello!#Welcome to LULLY Online!",.25,.25,image_angle);
    } else {
            draw_set_font(signfont);
            //draw_text(obj_signpost.x+35, obj_signpost.y-8, "Hello!#Welcome to LULLY Online!");
            draw_text_transformed(obj_signpost.x+35, obj_signpost.y-16, "Hello!#Welcome to LULLY Online!",.25,.25,image_angle);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw nameplate
draw_set_color(image_blend);
draw_set_halign(fa_center);
draw_text(x,y-sprite_yoffset-5-string_height(self.name),self.name);
draw_set_halign(fa_left);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(spr_ladder,0,x,y,1+abs(sin(scale)),1+abs(sin(scale)),0,c_white,1);
//scale+=.1;
draw_self();
//draw_sprite_ext(spr_player_mask,0,x,y,image_xscale,image_yscale,image_angle,c_white,.5);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [***SIGNPOST***]
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FONT SET

//draw_set_font(signfont);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME RESTART

game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
